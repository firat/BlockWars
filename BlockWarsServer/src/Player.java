import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.Hashtable;

/**
 * 
 * @author Fırat Can Başarır <fcbasarir@cs.bilgi.edu.tr>
 * @author Banuçiçek Gürcüoğlu <banucicekg@cs.bilgi.edu.tr>
 *
 * An instances of this class is created when a client is logged in. All players
 * are kept in a hash table and the value generated player.generateHash() is used
 * as a hash key.
 * 
 * This class holds all the information and game state of a player.
 */
public class Player {
	/**
	 * SquareBoard that the player is playing on.
	 */
	private SquareBoard board;
	
	/**
	 * The GameThread that is ticking on the board.
	 */
	private GameThread thread;
	
	
	/**
	 * The InputThread that is handling key event from client.
	 */	
	private InputThread inputThread;
	
	/**
	 * Player's username
	 */
	private String username;
	
	/**
	 * Player's password
	 */
	private String password;
	
	/**
	 * Player's hash value generated by generateHash()
	 */
	private String hash;
	
	private BlockWarsServer server;
	private int score;
	
	Player(String password, BlockWarsServer server) {
		this.board = new SquareBoard(BlockWarsConstants.COLUMNS, BlockWarsConstants.ROWS, this);
		
		this.username = "Player-";
		this.password = password;
		this.hash = this.generateHash();
		
		this.thread = new GameThread(this.board);
		this.thread.setDaemon(true);
		
		this.inputThread = new InputThread(this.board);
		this.inputThread.setDaemon(true);
	
		this.server = server;
	}
	
	/**
	 * Generates the player's hash.
	 * 
	 * @return	the generated hash.
	 */
	public String generateHash() {
		return this.username + this.password + new Date().hashCode();
	}
	
	public void setNewHash() {
		this.hash = this.generateHash();
	}
	
	/**
	 * Get the SquareBoard that the player is playing on.
	 * 
	 * @return	player's board
	 */
	public SquareBoard getBoard() {
		return this.board;
	}
	
	
	/**
	 * Get the InputThread that the player is playing on.
	 * 
	 * @return	player's key
	 */	
	
	public InputThread getInputThread() {
		return this.inputThread;
	}
	
	
	
	/**
	 * Return player's username
	 * 
	 * @return	player's username
	 */
	public String getUsername() {
		return this.username;
	}
	
	/**
	 * Start the game thread. This method is called
	 * when the client is ready to play.
	 */
	public void startPlaying() {
		this.thread.start();
		this.inputThread.start();
	}
	
	/**
	 * Pause the thread
	 */
	public void pause() {
		this.thread.pause();
	}
	
	/**
	 * Unpause the thread
	 */
	public void unpause() {
		this.thread.notify();
	}
	
	/**
	 * Check if the thread is paused
	 * 
	 * @return	true if the thread is paused,
	 * 			false otherwise.
	 */
	public boolean isPaused() {
		return this.thread.isPaused();
	}
	
	/**
	 * Return the player's hash. It is used as a security token between
	 * the client and the server.
	 * 
	 * @return	player's hash
	 */
	public String getHash() {
		return this.hash;
	}

	public boolean hasPassword(String password) {
		return this.password.equals(password);
	}
	
	public void addLinesToOpponent(int num) {
		this.server.addLinesToOpponent(this.hash, num);
	}
	
	public void stopPlaying() {
		try {
			this.thread.join();
			this.inputThread.join();
		} catch (Exception e) {
			
		}
	}
	
	public void gameOver() {
		this.stopPlaying();
		this.server.gameOver(this.hash);
	}
	
	public void victory() {
		this.score++;
	}
	
	public int getScore() {
		return this.score;
	}
	
	/**
	 * Lookup the PlayerAccount with the provided username and string.
	 * Create and return a new player instance if the provided account is correct.
	 * Throw InvalidPassword if the password is wrong
	 * Throw PlayerNotFound if the a PlayerAccount with the given username is not found.
	 * 
	 * @param username	player's username
	 * @param password	player's password
	 * @return	A new player instance with the provided username and password
	 * @throws	PlayerNotFound if the PlayerAccount is not found.
	 * @throws	InvalidPassword if the provided password doesn't match with the one in DB.
	 */
	public static Player login(String username, String password, BlockWarsServer server) {
		return new Player(password, server);
	}
	
}
